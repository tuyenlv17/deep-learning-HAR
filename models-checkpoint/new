Accuracy: 0.92
F1 score: 0.917094636832
Recall: 0.918724491479
Precision: 0.925341691808

 clasification report:
             precision    recall  f1-score   support

          0    0.95238   1.00000   0.97561        40
          1    1.00000   0.80952   0.89474        42
          2    0.93750   1.00000   0.96774        30
          3    1.00000   0.92857   0.96296        28
          4    0.93023   0.91954   0.92486        87
          5    0.82051   0.78049   0.80000        41
          6    1.00000   1.00000   1.00000        16
          7    1.00000   1.00000   1.00000        32
          8    0.83721   1.00000   0.91139        36
          9    1.00000   1.00000   1.00000        74
         10    0.94286   0.91667   0.92958        72
         11    0.62500   0.88235   0.73171        34
         12    0.90909   0.62500   0.74074        32
         16    1.00000   1.00000   1.00000        36

avg / total    0.92860   0.92000   0.92030       600


 confussion matrix:
/usr/lib/python2.7/dist-packages/scipy/sparse/coo.py:200: VisibleDeprecationWarning: `rank` is deprecated; use the `ndim` attribute
 or function instead. To find the rank of a matrix see `numpy.linalg.matrix_rank`.
  if np.rank(self.data) != 1 or np.rank(self.row) != 1 or np.rank(self.col) != 1:
[[40  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0 34  0  0  2  2  0  0  0  0  0  4  0  0]
 [ 0  0 30  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0 26  0  0  0  0  0  0  0  2  0  0]
 [ 0  0  0  0 80  3  0  0  0  0  0  4  0  0]
 [ 2  0  0  0  2 32  0  0  1  0  2  0  2  0]
 [ 0  0  0  0  0  0 16  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 32  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0 36  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0 74  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  6  0 66  0  0  0]
 [ 0  0  0  0  0  2  0  0  0  0  2 30  0  0]
 [ 0  0  2  0  2  0  0  0  0  0  0  8 20  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0 36]]

Accuracy: 0.841246290801
F1 score: 0.837902749673
Recall: 0.848336040715
Precision: 0.872763654793

 clasification report:
             precision    recall  f1-score   support

          0    1.00000   1.00000   1.00000        19
          1    1.00000   1.00000   1.00000        20
          2    1.00000   1.00000   1.00000        20
          3    0.94118   0.84211   0.88889        19
          4    0.74545   1.00000   0.85417        41
          5    0.94872   1.00000   0.97368        37
          6    0.98113   0.83871   0.90435        62
          7    0.93103   0.98182   0.95575        55
          8    0.53846   1.00000   0.70000        21
          9    0.90909   0.48780   0.63492        41
         10    0.53488   0.97872   0.69173        47
         11    0.96000   0.97297   0.96644        74
         12    0.97727   0.91489   0.94505        47
         13    1.00000   0.36735   0.53731        49
         14    0.87500   0.65116   0.74667        43
         15    0.92308   0.77419   0.84211        31
         16    1.00000   0.88889   0.94118        27
         17    0.44444   0.57143   0.50000        21

avg / total    0.88554   0.84125   0.83858       674


 confussion matrix:
/usr/lib/python2.7/dist-packages/scipy/sparse/coo.py:200: VisibleDeprecationWa
rning: `rank` is deprecated; use the `ndim` attribute or function instead. To
find the rank of a matrix see `numpy.linalg.matrix_rank`.
  if np.rank(self.data) != 1 or np.rank(self.row) != 1 or np.rank(self.col) !=
 1:
[[19  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0 20  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0 20  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0 16  1  0  0  0  0  0  0  2  0  0  0  0  0  0]
 [ 0  0  0  0 41  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0 37  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  5  2 52  2  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0 54  0  0  0  0  0  0  0  1  0  0]
 [ 0  0  0  0  0  0  0  0 21  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  2 20  0  0  0  0  4  0  0 15]
 [ 0  0  0  0  0  0  0  0  0  1 46  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  1 72  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  3  0  0  0 43  0  0  1  0  0]
 [ 0  0  0  0  0  0  0  0  4  0 25  1  1 18  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1 14  0  0  0 28  0  0  0]
 [ 0  0  0  0  7  0  0  0  0  0  0  0  0  0  0 24  0  0]
 [ 0  0  0  0  1  0  1  1  0  0  0  0  0  0  0  0 24  0]
 [ 0  0  0  0  0  0  0  0  9  0  0  0  0  0  0  0  0 12]]

 #remove watch
 (0.0, 0.0, 0.0, None)
Accuracy: 0.562314540059
F1 score: 0.457250093669
Recall: 0.505215402989
Precision: 0.439826757357

 clasification report:
             precision    recall  f1-score   support

          0    0.94737   0.94737   0.94737        19
          1    0.00000   0.00000   0.00000        20
          2    0.00000   0.00000   0.00000        20
          3    0.33333   0.68421   0.44828        19
          4    0.80000   0.97561   0.87912        41
          5    1.00000   1.00000   1.00000        37
          6    0.98214   0.88710   0.93220        62
          7    0.92982   0.96364   0.94643        55
          8    0.00000   0.00000   0.00000        21
          9    0.00000   0.00000   0.00000        41
         10    0.27848   0.46809   0.34921        47
         11    0.67470   0.75676   0.71338        74
         12    0.00000   0.00000   0.00000        47
         13    0.19895   0.77551   0.31667        49
         14    0.00000   0.00000   0.00000        43
         15    0.84615   0.70968   0.77193        31
         16    0.92593   0.92593   0.92593        27
         17    0.00000   0.00000   0.00000        21

avg / total    0.48986   0.56231   0.50899       674


 confussion matrix:
/usr/lib/python2.7/dist-packages/scipy/sparse/coo.py:200: VisibleDeprecationWarning: `rank` is deprecated; use the `ndim` attribute
 or function instead. To find the rank of a matrix see `numpy.linalg.matrix_rank`.
  if np.rank(self.data) != 1 or np.rank(self.row) != 1 or np.rank(self.col) != 1:
[[18  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  6  0  0  0  0  0  0  0  1  0 13  0  0  0  0]
 [ 0  0  0  3  0  0  0  0  0  0  0  0  0 17  0  0  0  0]
 [ 0  0  0 13  0  0  0  0  0  0  0  0  0  6  0  0  0  0]
 [ 0  0  0  0 40  0  0  0  0  0  0  0  0  0  0  1  0  0]
 [ 0  0  0  0  0 37  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  1  0 55  0  0  0  1  1  0  0  0  0  1  2]
 [ 1  0  0  0  0  0  0 53  0  0  0  0  0  0  0  0  1  0]
 [ 0  0  0  1  0  0  0  0  0  0  9  0  0 11  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  1  0  0 38  0  0  0  1]
 [ 0  0  0  1  0  0  0  1  0  0 22 23  0  0  0  0  0  0]
 [ 0  0  1 11  0  0  1  3  0  0  1 56  0  0  0  1  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  9  0  0 37  0  1  0  0]
 [ 0  0  0  2  0  0  0  0  0  0  8  1  0 38  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  1 27  1  2 10  0  0  0  1]
 [ 0  0  0  0  9  0  0  0  0  0  0  0  0  0  0 22  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1 25  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0 21  0  0  0  0]]